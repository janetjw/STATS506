---
title: "Problem Set 2"
author: "Janet Wang"
format: html
code-fold: true
code-summary: "Show the code"
embed-resources: true
editor: visual
---

```{r setup, include=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Dropbox (University of Michigan)/STATS506/ProblemSets")
library(dplyr);library(microbenchmark);library(interactions)
```

Git repository

<https://github.com/janetjw/STATS506/blob/main/ProblemSets/JW_PS2.qmd>

<https://github.com/janetjw/STATS506/blob/main/ProblemSets/JW_PS2.html>

## Problem 1

### a

I create for versions to play the dice game.

```{r}
#' Function to create dice roll game with loop over the die rolls
#' @param x number of die rolls
#' @return The score for `x`

play_dice_a <- function(x){
  i = 1 #initializing with one roll and zero winnings
  winnings = 0
  
  while(i <= x){ #while the number of rolls is less than the specified total.
    winnings = winnings - 2 #subtract cost of game 
    roll <- sample(1:6,1, replace = TRUE) #roll the die
    if(roll%%2 == 0){ #if statement, if the roll is even, add the roll total to the winnings for that round
      winnings <- winnings+roll
    }
    i = i+1 #increment to increase the roll count
  }
  return(winnings)
}

#' Function to create dice roll game with built-in R vectorized functions
#' @param x number of die rolls
#' @return The score for `x`

play_dice_b <- function(x)
{
  rolls <- sample(1:6, x, replace = TRUE) 
  winnings = sum(rolls[which(rolls%%2 == 0)]) - length(rolls)*2 #summing up the winnings minus cost of each game (vectorizing with which and length functions )
  return(winnings)
}

#' Function to create dice roll game with a single table
#' @param x number of die rolls
#' @return The score for `x`
play_dice_c <- function(x)
{
  gametable <- table(sample(1:6, x, replace = TRUE)) #creating table with frequencies of rolls 1:6
  winnings <- gametable[which(as.numeric(dimnames(gametable)[[1]]) %%2 == 0)]*
    as.numeric(dimnames(gametable)[[1]][which((as.numeric(dimnames(gametable)[[1]])) %% 2 == 0)]) #getting number of even rolls on the evens
  return(sum(winnings)-2*x) #summing up the winnings minus cost of each game
} 


#' Function to create dice roll game with an "apply" type function
#' @param x number of die rolls
#' @return The score for `x`
play_dice_d <- function(x)
{
  gametable <- matrix(nrow = x, ncol = 1) #creating empty matrix for rolls
  gametable[,1] <- sample(1:6, x, replace = TRUE) #rolling
  winnings <- apply(gametable, 1, function(p){ #calculating the winnings of each roll minus cost of game by using if else function 
    ifelse(p%%2 == 0, p-2, -2) #if even, winnings for that round are the value of the roll minus 2, otherwise, just minus 2
  })
  return(sum(winnings)) #summing rolls 
}

```

### b

Demonstrating that all versions work with 3 and 3000

```{r}
play_dice_a(3)
play_dice_a(3000)

play_dice_b(3)
play_dice_b(3000)

play_dice_c(3)
play_dice_c(3000)

play_dice_d(3)
play_dice_d(3000)
```

### c

Demonstrate that versions give the same results -- I set the same seed in the function so that the numbers sampled are the same

```{r}
set.seed(121667)
play_dice_a(3)

set.seed(121667)
play_dice_a(3000)

set.seed(121667)
play_dice_b(3)

set.seed(121667)
play_dice_b(3000)

set.seed(121667)
play_dice_c(3)

set.seed(121667)
play_dice_c(3000)

set.seed(121667)
play_dice_d(3)

set.seed(121667)
play_dice_d(3000)
```

### d

Use microbenchmark to demonstrate with a low input (100) and a large input (10000)

```{r}
microbenchmark(play_dice_a(100), play_dice_b(100), play_dice_c(100), play_dice_d(100))
microbenchmark(play_dice_a(10000), play_dice_b(10000), play_dice_c(10000), play_dice_d(10000))
```

We see that the function for playing dice with the vectorized functions performs fastest, then the table() version, the apply() version, and lastly, the loop version. I get similar results in that order for the low and large input.

### e

Assess whether this is a fair game with evidence from a Monte Carlo simulation. I run a Monte Carlo simulation to calculate the mean winnings over many games (I also get a random draw for number of rolls for each game). If the mean is greater than or equal to zero, I would say this is a fair game. If less than zero, I would say this is an unfair game.

```{r}

n <- 5000 #running 5000 simulations
monte_winnings_a <- NULL
monte_winnings_b <- NULL
monte_winnings_c <- NULL
monte_winnings_d <- NULL

set.seed(1)

for(i in 1:n){
  x <- sample(1:1000, 1)
  monte_winnings_a[i] <- play_dice_a(x)
  monte_winnings_b[i] <- play_dice_b(x)
  monte_winnings_c[i] <- play_dice_c(x)
  monte_winnings_d[i] <- play_dice_d(x)
}

mean(monte_winnings_a) + (qt(0.975,df = n-1)*sd(monte_winnings_a)/sqrt(n))
mean(monte_winnings_a) - (qt(0.975,df = n-1)*sd(monte_winnings_a)/sqrt(n))

mean(monte_winnings_b) + (qt(0.975,df = n-1)*sd(monte_winnings_b)/sqrt(n))
mean(monte_winnings_b) - (qt(0.975,df = n-1)*sd(monte_winnings_b)/sqrt(n))
                                               
mean(monte_winnings_c) + (qt(0.975,df = n-1)*sd(monte_winnings_c)/sqrt(n))
mean(monte_winnings_c) - (qt(0.975,df = n-1)*sd(monte_winnings_c)/sqrt(n))

mean(monte_winnings_d) + (qt(0.975,df = n-1)*sd(monte_winnings_d)/sqrt(n))
mean(monte_winnings_d) - (qt(0.975,df = n-1)*sd(monte_winnings_d)/sqrt(n))

hist(monte_winnings_a); hist(monte_winnings_b); hist(monte_winnings_c); hist(monte_winnings_d)

```

Given the 95% confidence intervals contain zero and the histograms of winnings distributions center around zero, I'd say this game is pretty fair.

## Problem 2

### a

Renaming columns

```{r}
cars <- read.csv("cars.csv")
colnames(cars) <- c("height", "length", "width", "driveline", "enginetype", "hybrid", "forwardgears", "transmission", "city", 
                    "fueltype", "highway", "classification", "id", "make", "modelyear", "year", "horsepower", "torque")
```

### b

Restricting data to cars whose Fuel Type is "Gasoline".

```{r}
cars <- cars[which(cars$fueltype == "Gasoline"), ]
```

### c

```{r}
cars$year <- as.factor(cars$year)
model1 <- lm(highway ~ horsepower + torque + height + length + width + year, data = cars)
summary(model1)
```

The coefficient for horsepower is 0.0163556 and the p value is 7.96e-13. This means there is a statistically significant, positive relationship between horsepower and highway mpg. The coefficient is small in magnitude, and means that for one unit increase in horsepower (745.7 watts), mpg on highways increases by 0.0163556 (controlling for other variables in the model).

### d

```{r}
model2 <- lm(highway ~ horsepower*torque + height + length + width + year, data = cars)
summary(model2)
summary(cars$torque)
table(cars$year)
interact_plot(model2, pred = horsepower, modx = torque, modx.values = c(177.0, 267.2, 332.0), at = list(year="2011"))
```

I chose three different values of torque based on the 1st quartile, mean, and third quartile: 177.0, 267.2, 332.0. I select data from year 2011 since that year has the most observations of any year in the data. We see that cars with higher levels of torque have a stronger relationship between horsepower and mpg on the highway.

### e

Recall that beta hat is the inverse of x transposed times x, times x transposed, times y. Multiplication here is matrix multiplication.

```{r}
x <- model.matrix( ~ horsepower*torque + height + length + width + year, data = cars)
betahat <- solve(t(x) %*% x) %*% t(x) %*% cars$highway
betahat[2,1]
coef(model2)[2]
```

We get the same coefficient from the linear model, 0.01635563! I get the same coefficient.

## Problem 3

### a

``` stata
. cd "/Users/janetjw/Dropbox (University of Michigan)/STATS506/ProblemSets/"
/Users/janetjw/Dropbox (University of Michigan)/STATS506/ProblemSets

. import delimited "cars.csv"
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)

. 
. rename (*) (height length width driveline enginetype hybrid forwardgears transmission city fueltype highway classification id make modelyear year horsepower torque)
```

### b

``` stata
. keep if fueltype == "Gasoline"
(485 observations deleted)
```

### c

``` stata
. reg highway horsepower torque height length width year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(6, 4584)      =    549.28
       Model |  69889.2409         6  11648.2068   Prob > F        =    0.0000
    Residual |  97209.7267     4,584  21.2063104   R-squared       =    0.4183
-------------+----------------------------------   Adj R-squared   =    0.4175
       Total |  167098.968     4,590  36.4050038   Root MSE        =     4.605

------------------------------------------------------------------------------
     highway | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0165738   .0022769     7.28   0.000     .0121101    .0210376
      torque |  -.0510155   .0022019   -23.17   0.000    -.0553323   -.0466987
      height |   .0098205   .0011235     8.74   0.000     .0076179    .0120231
      length |   .0016162   .0008831     1.83   0.067    -.0001151    .0033475
       width |  -.0004419   .0009041    -0.49   0.625    -.0022143    .0013306
        year |   .8145434   .0864317     9.42   0.000     .6450956    .9839912
       _cons |  -1605.366   173.7969    -9.24   0.000    -1946.092   -1264.641
------------------------------------------------------------------------------

. 
```

Stata reports that the coefficient for horsepower is .0165738 and the p value is 0.000. There is a statistically significant, positive relationship between horsepower and highway mpg. For one unit increase in horsepower (745.7 watts), mpg on highways increases by .0165738 (ceteris paribus).

### d

``` stata
. reg highway c.horsepower##c.torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

---------------------------------------------------------------------------------------
              highway | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
                      |
                 year |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------

. 
. codebook torque

----------------------------------------------------------------------------------------------
torque                                             Engine Information.Engine Statistics.Torque
----------------------------------------------------------------------------------------------

                  Type: Numeric (int)

                 Range: [98,774]                      Units: 1
         Unique values: 214                       Missing .: 0/4,591

                  Mean:  267.22
             Std. dev.: 101.327

           Percentiles:     10%       25%       50%       75%       90%
                            148       177       257       332       410

. codebook horsepower

----------------------------------------------------------------------------------------------
horsepower                                     Engine Information.Engine Statistics.Horsepower
----------------------------------------------------------------------------------------------

                  Type: Numeric (int)

                 Range: [100,638]                     Units: 1
         Unique values: 213                       Missing .: 0/4,591

                  Mean: 267.466
             Std. dev.:  97.432

           Percentiles:     10%       25%       50%       75%       90%
                            156       185       263       317       400

. 
. margins, at(horsepower=( 200 400 600 ) torque = (177 267.22 332) year = 2011)

Predictive margins                                       Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: horsepower =    200
       torque     =    177
       year       =   2011
2._at: horsepower =    200
       torque     = 267.22
       year       =   2011
3._at: horsepower =    200
       torque     =    332
       year       =   2011
4._at: horsepower =    400
       torque     =    177
       year       =   2011
5._at: horsepower =    400
       torque     = 267.22
       year       =   2011
6._at: horsepower =    400
       torque     =    332
       year       =   2011
7._at: horsepower =    600
       torque     =    177
       year       =   2011
8._at: horsepower =    600
       torque     = 267.22
       year       =   2011
9._at: horsepower =    600
       torque     =    332
       year       =   2011

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   28.70501   .1250433   229.56   0.000     28.45987    28.95016
          2  |   22.96811   .1803012   127.39   0.000     22.61463    23.32159
          3  |   18.84888   .3010316    62.61   0.000     18.25872    19.43905
          4  |   29.34977   .4871132    60.25   0.000      28.3948    30.30475
          5  |   25.64023   .3082573    83.18   0.000      25.0359    26.24457
          6  |    22.9767   .1940175   118.43   0.000     22.59633    23.35707
          7  |   29.99454   .9219402    32.53   0.000     28.18709    31.80198
          8  |   28.31236    .725531    39.02   0.000     26.88997    29.73475
          9  |   27.10452   .5956487    45.50   0.000     25.93676    28.27228
------------------------------------------------------------------------------

. 
. marginsplot

Variables that uniquely identify margins: horsepower torque

. graph export "/Users/janetjw/Dropbox (University of Michigan)/STATS506/ProblemSets/JW_PS2sta
> ta.png", as(png) name("Graph") replace
file /Users/janetjw/Dropbox (University of Michigan)/STATS506/ProblemSets/JW_PS2stata.png
    saved as PNG format
```

![M argins plot](JW_PS2stata.png "Margins plot")

After running the model, I use the first quartile, mean, and third quartile values of torque as representative values for the margins plot. I select the values of 200, 400, and 600, since horsepower is also continuous and these are the values that are included in the x axis of horsepower in the interaction plot from R.

This interaction plot displays predictive margins for the relationship between mpg on highway and horsepower at different values of torque in 2011, while controlling for the other variables in the model. It looks like the interaction plot I created in R.

### e

I used [this manual](https://www.schmidheiny.name/teaching/statamata.pdf) to help me with calculating the inverse matrix:

``` stata
. gen year2010 = 0

. replace year2010 =1 if year == 2010
(1,633 real changes made)

. gen year2011 = 0

. replace year2011  =1 if year == 2011
(1,794 real changes made)

. gen year2012 = 0

. replace year2012  =1 if year == 2012
(1,116 real changes made)

. gen horsepowerxtorque = horsepower * torque

. gen inter = 1

. 
. mata
------------------------------------------------- mata (type end to exit) --------------------
: 
: X = st_data(.,("inter", "horsepower", "torque", "height", "length", "width", "year2010", "ye
> ar2011", "year2012", "horsepowerxtorque"))

: 
: y = st_data(.,("highway"))

: 
: 
: invsym(X'*X)*X'*y
                   1
     +----------------+
   1 |   42.18794787  |
   2 |  -.0166633227  |
   3 |  -.0860592704  |
   4 |   .0065603903  |
   5 |   .0017767232  |
   6 |  -.0011694485  |
   7 |   -.562785777  |
   8 |   .0725356431  |
   9 |   1.197032999  |
  10 |   .0001123567  |
     +----------------+

: 
: end
----------------------------------------------------------------------------------------------
```

We see that the coefficient for horsepower, -.0166633227, is the same when I manually calculate it using Mata.
