---
title: "Problem Set 1"
author: "Janet Wang"
format: html
    code-fold: true
    code-summary: "Show the code"
editor: visual
---

```{r setup, include=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Dropbox (University of Michigan)/STATS506/ProblemSets")
library(dplyr)
```

## Problem 1

### a

Loading in dataset and renaming column names.

```{r}
wine <- read.csv("wine/wine.data", header=FALSE)
wine <-wine %>% 
 rename("class"=1, "Alcohol"=2, "Malic acid"=3, "Ash"=4, 
        "Alcalinity of ash"=5, "Magnesium"=6, "Total phenols"=7,
        "Flavanoids"=8, "Nonflavanoid phenols"=9, "Proanthocyanins"=10,
        "Color intensity"=11, "Hue"=12,  
        "OD280/OD315 of diluted wines"=13, "Proline"=14)
```

### b

Checking the class membership of wines

```{r}
xtabs(~class, wine)
```

They look good!

### c

```{r}
wine[which(wine$Alcohol == max(wine$Alcohol)), "class"]

wine[which(wine$Alcohol == min(wine$Alcohol)), "class"]

sum(wine$Magnesium > 114)

sum(wine[which(wine$class == 1),]$Magnesium > 114)
sum(wine[which(wine$class == 2),]$Magnesium > 114)
sum(wine[which(wine$class == 3),]$Magnesium > 114)

```

The wine with the highest alcohol content belongs to which class? It belongs to class 1.

The wine with the lowest alcohol content belongs to which class? It belongs to class 2.

German beers have, on average, 114 mg/l of magnesium. How many of these wines have higher levels of magnesium than that? (You may assume that the magnesium reported in the data is in the same units.) 26 wines.

Within each class, how many wines have higher levels of magnesium than average German beer? Class 1 - 15 wines, class 2 - 6 wines, class 3 - 5 wines.

### d

Create a table identifying average value of each variable and one row per class with class averages.

```{r}
avgtable <- data.frame(t(colMeans(wine[,-1])))
avgtable1 <- data.frame(t(colMeans(wine[which(wine$class==1),-1])))
avgtable2 <- data.frame(t(colMeans(wine[which(wine$class==2),-1])))
avgtable3 <- data.frame(t(colMeans(wine[which(wine$class==3),-1])))

avgtables <- rbind(avgtable, avgtable1, avgtable2, avgtable3)
avgtables$Averages <- c("all rows", "class 1", "class 2", "class 3"); avgtables <- avgtables %>% relocate(averages)

rm(avgtable, avgtable1, avgtable2, avgtable3)
avgtables
```

### e

Does Ash differ across the three classes?

```{r}
t.test(wine[which(wine$class==1), "Ash"], wine[which(wine$class==2), "Ash"])
t.test(wine[which(wine$class==3), "Ash"], wine[which(wine$class==2), "Ash"])
t.test(wine[which(wine$class==1), "Ash"], wine[which(wine$class==3), "Ash"])

```

I hypothesis that there is not a statistically significant difference in means between 1) class 1 Ash levels and class 2 Ash levels 2) class 3 Ash levels and class 2 Ash levels 3) class 1 Ash levels and class 3 Ash levels

The results of the t tests indicate I should reject hypothesis 1 (there is no statistically significant difference in mean Ash levels for class 1 and class 2) and hypothesis 2 (there is no statistically significant difference in mean Ash levels for class 3 and class 2) but not hypothesis 3 (there is no statistically significant difference in mean Ash levels for class 1 and class 3).

There could be something very different occurring with class 2 Ash levels given that i rejected hypotheses 1 and 2 but not 3.

## Problem 2

### a Building the function

```{r}
isPerfectPower <- function(number, power){
  isPerfectPower_list <- list()
  isPerfectPower_list$isPerfect <- ifelse(number^(1/power)%%1 > 0, FALSE, TRUE)
  isPerfectPower_list$root <- round(number^(1/power), digits = 3)
  return(isPerfectPower_list)
  #print(isPerfectPower_list$isPerfect)
  #print(isPerfectPower_list$root)  
}
```

### b Demonstrating the function works

```{r}
findRootPower <- function(n){
  
  answer <- isPerfectPower(n,100000)$isPerfect
  p <- 1
  
  while(answer == FALSE & p < sqrt(n)){
    p <- p + 1
    answer <- isPerfectPower(n,p)$isPerfect
  }
    
  if(answer == TRUE){
    print(paste(n, " = ", isPerfectPower(n,p)$root, "^", p, sep = ""))
  } 
  if(answer == FALSE){
    print(paste(n, "is not a perfect power!"))
  }    
  
}

findRootPower(27)
findRootPower(13060694016)
findRootPower(7776)
findRootPower(170859375)
findRootPower(58247422)
findRootPower(94143178827)

```

## Problem 3

### a

> Here are two R functions to accomplish your task. The first function, determine_poker_hand, takes a vector of suits and a vector of ranks representing a 5-card hand and returns the name of the poker hand. The second function, deal_poker_round, simulates dealing a round of cards in a game of 5 card stud poker for a specified number of players. It also uses the first function to display the name of each player's hand.


```{r, eval = FALSE}
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Helper function to count the frequency of each rank
  count_ranks <- function(ranks) {
    rank_counts <- table(ranks)
    rank_counts <- sort(rank_counts, decreasing = TRUE)
    return(rank_counts)
  }
  
  # Sort the ranks in descending order of frequency
  sorted_rank_counts <- count_ranks(ranks)
  
  # Check for specific poker hands
  if (length(unique(suits)) == 1) {
    if (all(diff(sort(ranks)) == 1)) {
      return("Straight Flush")
    }
    return("Flush")
  }
  if (all(diff(sort(ranks)) == 1)) {
    return("Straight")
  }
  if (max(sorted_rank_counts) == 4) {
    return("Four of a Kind")
  }
  if (max(sorted_rank_counts) == 3 && sum(sorted_rank_counts >= 2) == 2) {
    return("Full House")
  }
  if (max(sorted_rank_counts) == 3) {
    return("Three of a Kind")
  }
  if (sum(sorted_rank_counts == 2) == 4) {
    return("Two Pair")
  }
  if (max(sorted_rank_counts) == 2) {
    return("One Pair")
  }
  
  return("High Card")
}

# Function to simulate dealing a round of 5 card stud poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(2:10, times = 4)
  ranks <- c("Jack", "Queen", "King", "Ace", ranks)
  
  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal 5 cards to each player
  players <- vector("list", length = num_players)
  for (i in 1:num_players) {
    players[[i]] <- deck[(i - 1) * 5 + 1:(i * 5), ]
  }
  
  # Determine and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n")
    cat(players[[i]]$Rank, "of", players[[i]]$Suit, "\n")
    hand_name <- determine_poker_hand(players[[i]]$Suit, players[[i]]$Rank)
    cat("Hand Name:", hand_name, "\n\n")
  }
}

# Example usage:
set.seed(123)  # for reproducibility
deal_poker_round(4)  # Simulate a round of 5 card stud poker with 4 players
```

> You can call the deal_poker_round function with the number of players you want to simulate in a round of poker. It will display each player's hand and the name of their hand as determined by the determine_poker_hand function.

### b

The code above did not work, since i got an error message
```{r}
# suits <- players[[3]]$Suit
# ranks <- players[[3]]$Rank

# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Helper function to count the frequency of each rank
  count_ranks <- function(ranks) {
    rank_counts <- table(ranks)
    rank_counts <- sort(rank_counts, decreasing = TRUE)
    return(rank_counts)
  }
  
  # Sort the ranks in descending order of frequency
  sorted_rank_counts <- count_ranks(ranks)
  
  # Check for specific poker hands
  if (length(unique(suits)) == 1) {
    if (all(diff(as.numeric(sort(ranks))) == 1)) {
      return("Straight Flush")
    }
    return("Flush")
  }
  if (all(diff(as.numeric(sort(ranks))) == 1)) {
    return("Straight")
  }
  if (max(sorted_rank_counts) == 4) {
    return("Four of a Kind")
  }
  if (max(sorted_rank_counts) == 3 && sum(sorted_rank_counts >= 2) == 2) {
    return("Full House")
  }
  if (max(sorted_rank_counts) == 3) {
    return("Three of a Kind")
  }
  if (sum(sorted_rank_counts == 2) == 4) {
    return("Two Pair")
  }
  if (max(sorted_rank_counts == 2) == 2) {
    return("One Pair")
  }
  
  return("High Card")
}

# Function to simulate dealing a round of 5 card stud poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(2:14, times = 4)

  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal 5 cards to each player
  players <- vector("list", length = num_players)
  for (i in 1:num_players) {
    #players[[i]] <- deck[(i - 1) * 5 + 1:(i * 5), ]
    rownum <- sample(nrow(deck), size = 5, replace = FALSE)
    players[[i]] <- deck[rownum, ]
  }
  
  # Determine and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n")
    cat(players[[i]]$Suit, "\n")
    cat(players[[i]]$Rank, "\n")
    hand_name <- determine_poker_hand(players[[i]]$Suit, players[[i]]$Rank)
    cat("Hand Name:", hand_name, "\n\n")
  }
}

    #cat(players[[i]]$Rank, "of", players[[i]]$Suit, "\n")
    #print(players[[i]])
# Example usage:
set.seed(123)  # for reproducibility
deal_poker_round(4)  # Simulate a round of 5 card stud poker with 4 players

#Now trying my own thing
deal_poker_round(6)  # Simulate a round of 5 card stud poker with 6 players
deal_poker_round(3)  # Simulate a round of 5 card stud poker with 3 players
```
It doesn't seem to be working but I have fixed the error so that it has output that makes sense (although it is wrong output).

There were a lot of mistakes so I'll explain the main issues I tried to fix (so that an error message wouldn't show up):

The number of ranks was incorrect since it only assigned 2 of each of the face cards to a deck. I changed the frequency and gave them numbers because the top function of determining the poker hand wouldn't recognize the characters. So Jack = 11, Queen = 12, and so on.
The deal_poker_round() function wasn't distributing cards properly, it was giving different numbers of cards to each player so I changed it to distribute five cards. 
Displaying each player's hand was also working incorrectly (the cat() function wasn't outputting the suits and respective ranks in the same order).
Then the big function on top determine_poker_hand() was also causing issues. sort(ranks) wasn't giving numeric values which led to issues with figuring out what hand. So I had to add as.numeric().
I also added an additional max(sorted_rank_counts == 2) == 2 to 2 pair and 1 pair since the original second set of "==2" was missing. 


### c 
Explaining what the code is doing (some of it is already commented by ChatGPT but not much of it so I will explain the edited version).
```{r}
# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) { #This is taking in the inputs, the respective suits and ranks of a hand
  # Helper function to count the frequency of each rank
  count_ranks <- function(ranks) { #this function is counting the number of times a rank appears in the hand and outputs the order
    rank_counts <- table(ranks)
    rank_counts <- sort(rank_counts, decreasing = TRUE)
    return(rank_counts)
  }
  
  # Sort the ranks in descending order of frequency
  sorted_rank_counts <- count_ranks(ranks) #this saves the frequencies 
  
  # Check for specific poker hands # now we are checking the hand for specific things (if none of these appear we simply have a high hand, or a hand where there is a highest singular card)
  if (length(unique(suits)) == 1) { 
    if (all(diff(as.numeric(sort(ranks))) == 1)) { #if all the cards are the same suit, then we have a flush. straight flush is when
      return("Straight Flush") #they are all in a sequence (thus we're cheking if the ranks all differ by 1)
    }
    return("Flush")
  }
  if (all(diff(as.numeric(sort(ranks))) == 1)) { #if ranks all differ by 1, we have a straight hand 
    return("Straight")
  }
  if (max(sorted_rank_counts) == 4) { #if we have a rank that shows up four times (e.g. a Jack in every suit), we have a four of a kind
    return("Four of a Kind")
  }
  if (max(sorted_rank_counts) == 3 && sum(sorted_rank_counts >= 2) == 2) { #this is testing if we have a three of a kind and 
    return("Full House") #if we have two cards of the same rank
  }
  if (max(sorted_rank_counts) == 3) { #this means we have three of the same rank
    return("Three of a Kind")
  }
  if (sum(sorted_rank_counts == 2) == 4) { #this means we have two sets of matching ranks (e.g. two 4s and two Queens)
    return("Two Pair")
  }
  if (max(sorted_rank_counts == 2) == 2) { #this mean we have one set of matching ranks
    return("One Pair")
  }
  
  return("High Card")
}

# Function to simulate dealing a round of 5 card stud poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13) #creating the suits because each suit has 13 cards
  ranks <- rep(2:14, times = 4) #creating the ranks (I had to change this from the original designations with Jack, Queen, etc. because I didn't think R would be able to differentiate the names versus values when it came to reporting the type of hand a player had)

  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks) #creating the deck
  deck <- deck[sample(nrow(deck)), ] #using sample to switch up the rows of the deck dataframe and thus shuffle the deck 
  
  # Deal 5 cards to each player
  players <- vector("list", length = num_players) #creating a list of players depending on the number
  for (i in 1:num_players) {
    #players[[i]] <- deck[(i - 1) * 5 + 1:(i * 5), ] #this didn't make sense to me and kept distributing the wrong number of cards so I commented it out 
    rownum <- sample(nrow(deck), size = 5, replace = FALSE) #this is sampling without replacement 5 cards each time 
    players[[i]] <- deck[rownum, ] #giving the player the five cards 
  }
  
  # Determine and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n") 
    cat(players[[i]]$Suit, "\n") #printing out the suit of each hand 
    cat(players[[i]]$Rank, "\n") #printing out the respective rank of each hand 
    hand_name <- determine_poker_hand(players[[i]]$Suit, players[[i]]$Rank) #using the top function to determine the hand
    cat("Hand Name:", hand_name, "\n\n") #outputting the function results for the type of hand 
  }
}
```

### d 

The code does take in and give out the correct inputs and outputs. Hands appear valid (fice cards, real cards, no duplicates).

The names of the hands do seem correct -- I looked at the wikipedia page for the list of poker hands and it seems like ChatGPT coded them correctly. 

There do seem to be duplicates as I requested it deal 11 hands and it does so and thus has to produce duplicate cards. I'll add a condition that does not permit the number of players to surpass the number of cards divided by 5. The error comes from the way the cards are distributed to each player -- sampling within the loop doesn't let R know that those cards are taken the next time the players get cards. 

```{r}
set.seed(121667)
deal_poker_round(11)
```

Furthermore, the code is not accurate -- I noticed that it always outputs "high hand" when determining what hand each player has, even if a player has two of a kind. 

Below I've attempted to debug it to return the proper hands and to not permit duplicates 
```{r}

# Function to determine the name of a poker hand
determine_poker_hand <- function(suits, ranks) {
  # Helper function to count the frequency of each rank
  count_ranks <- function(ranks) {
    rank_counts <- table(ranks)
    rank_counts <- sort(rank_counts, decreasing = TRUE)
    return(rank_counts)
  }
  
  # Sort the ranks in descending order of frequency
  sorted_rank_counts <- count_ranks(ranks)
  sorted_rank_counts <- as.data.frame(sorted_rank_counts)
  
  # Check for specific poker hands
  if (length(unique(suits)) == 1) {
    if (all(diff(as.numeric(sort(ranks))) == 1)) {
      return("Straight Flush")
    }
    return("Flush")
  }
  if (all(diff(as.numeric(sort(ranks))) == 1)) {
    return("Straight")
  }
  if (max(sorted_rank_counts$Freq) == 4) {
    return("Four of a Kind")
  }
  if (max(sorted_rank_counts$Freq) == 3 && sum(sorted_rank_counts$Freq >= 2) == 2) {
    return("Full House")
  }
  if (max(sorted_rank_counts$Freq) == 3) {
    return("Three of a Kind")
  }
  if (sum(sorted_rank_counts$Freq == 2) == 2) {
    return("Two Pair")
  }
  if (max(sorted_rank_counts$Freq == 2) == 1) {
    return("One Pair")
  }
  
  return("High Card")
}

# Function to simulate dealing a round of 5 card stud poker
deal_poker_round <- function(num_players) {
  if(num_players <= 10){
  # Define the deck of cards
  suits <- rep(c("Hearts", "Diamonds", "Clubs", "Spades"), each = 13)
  ranks <- rep(2:14, times = 4)

  # Shuffle the deck
  deck <- data.frame(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal 5 cards to each player
  players <- vector("list", length = num_players)
  for (i in 1:num_players) {
    players[[i]] <- deck[c(i, i+5, i+10, i+15, i+20), ]
    rownum <- sample(nrow(deck), size = 5, replace = FALSE)
    #players[[i]] <- deck[rownum, ]
  }
  
  # Determine and display each player's hand
  for (i in 1:num_players) {
    cat("Player", i, "Hand:\n")
    cat(players[[i]]$Suit, "\n")
    cat(players[[i]]$Rank, "\n")
    hand_name <- determine_poker_hand(players[[i]]$Suit, players[[i]]$Rank)
    cat("Hand Name:", hand_name, "\n\n")
  }
}
  else(return("Too Many Players!"))
  }
```
I managed to fix the duplicates situation by dealing every fifth card to the first player, second player, in order the way normal dealing works (the first player gets the first, sixth, eleventh, sixteenth, and twenty first card, the second player gets the second, seventh, twelfth, and so on). So that's great! However, the issue of the hands being reported incorrectly is harder to fix.

I managed to fix the hands by changing the shorted_rank_counts table into a data frame (R was calling on the wrong values to assess the number of pairs, and so on!) I also corrected "==4" and "==2" to be "==2" and "==1" (this original code was for identifying four of a kind and two of a kind, so those were incorrect). So now, things are looking normal and the output appears to be accurate. Hooray! 

```{r}

set.seed(121667)
deal_poker_round(11)
deal_poker_round(5)
deal_poker_round(6)

```

